// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: ems.proto

package ems

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmsRpcService_CheckEmsRpc_FullMethodName = "/ems.EmsRpcService/CheckEmsRpc"
	EmsRpcService_SendEmsRpc_FullMethodName  = "/ems.EmsRpcService/SendEmsRpc"
)

// EmsRpcServiceClient is the client API for EmsRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmsRpcServiceClient interface {
	CheckEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error)
	SendEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error)
}

type emsRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmsRpcServiceClient(cc grpc.ClientConnInterface) EmsRpcServiceClient {
	return &emsRpcServiceClient{cc}
}

func (c *emsRpcServiceClient) CheckEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error) {
	out := new(EmsResp)
	err := c.cc.Invoke(ctx, EmsRpcService_CheckEmsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emsRpcServiceClient) SendEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error) {
	out := new(EmsResp)
	err := c.cc.Invoke(ctx, EmsRpcService_SendEmsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmsRpcServiceServer is the server API for EmsRpcService service.
// All implementations must embed UnimplementedEmsRpcServiceServer
// for forward compatibility
type EmsRpcServiceServer interface {
	CheckEmsRpc(context.Context, *EmsReq) (*EmsResp, error)
	SendEmsRpc(context.Context, *EmsReq) (*EmsResp, error)
	mustEmbedUnimplementedEmsRpcServiceServer()
}

// UnimplementedEmsRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmsRpcServiceServer struct {
}

func (UnimplementedEmsRpcServiceServer) CheckEmsRpc(context.Context, *EmsReq) (*EmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmsRpc not implemented")
}
func (UnimplementedEmsRpcServiceServer) SendEmsRpc(context.Context, *EmsReq) (*EmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmsRpc not implemented")
}
func (UnimplementedEmsRpcServiceServer) mustEmbedUnimplementedEmsRpcServiceServer() {}

// UnsafeEmsRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmsRpcServiceServer will
// types in compilation errors.
type UnsafeEmsRpcServiceServer interface {
	mustEmbedUnimplementedEmsRpcServiceServer()
}

func RegisterEmsRpcServiceServer(s grpc.ServiceRegistrar, srv EmsRpcServiceServer) {
	s.RegisterService(&EmsRpcService_ServiceDesc, srv)
}

func _EmsRpcService_CheckEmsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsRpcServiceServer).CheckEmsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmsRpcService_CheckEmsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsRpcServiceServer).CheckEmsRpc(ctx, req.(*EmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmsRpcService_SendEmsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsRpcServiceServer).SendEmsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmsRpcService_SendEmsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsRpcServiceServer).SendEmsRpc(ctx, req.(*EmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmsRpcService_ServiceDesc is the grpc.ServiceDesc for EmsRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmsRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ems.EmsRpcService",
	HandlerType: (*EmsRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckEmsRpc",
			Handler:    _EmsRpcService_CheckEmsRpc_Handler,
		},
		{
			MethodName: "SendEmsRpc",
			Handler:    _EmsRpcService_SendEmsRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ems.proto",
}
