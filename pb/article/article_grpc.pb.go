// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleRpcService_ListArticle_FullMethodName   = "/article.ArticleRpcService/ListArticle"
	ArticleRpcService_ArticleInfo_FullMethodName   = "/article.ArticleRpcService/ArticleInfo"
	ArticleRpcService_AddArticle_FullMethodName    = "/article.ArticleRpcService/AddArticle"
	ArticleRpcService_EditArticle_FullMethodName   = "/article.ArticleRpcService/EditArticle"
	ArticleRpcService_ReviewArticle_FullMethodName = "/article.ArticleRpcService/ReviewArticle"
	ArticleRpcService_DeleteArticle_FullMethodName = "/article.ArticleRpcService/DeleteArticle"
	ArticleRpcService_ListLabel_FullMethodName     = "/article.ArticleRpcService/ListLabel"
	ArticleRpcService_LabelInfo_FullMethodName     = "/article.ArticleRpcService/LabelInfo"
	ArticleRpcService_AddLabel_FullMethodName      = "/article.ArticleRpcService/AddLabel"
	ArticleRpcService_UpdateLabel_FullMethodName   = "/article.ArticleRpcService/UpdateLabel"
	ArticleRpcService_DeleteLabel_FullMethodName   = "/article.ArticleRpcService/DeleteLabel"
)

// ArticleRpcServiceClient is the client API for ArticleRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcServiceClient interface {
	// 软文列表
	ListArticle(ctx context.Context, in *ListArticleParams, opts ...grpc.CallOption) (*ArticleListResp, error)
	// 软文详情
	ArticleInfo(ctx context.Context, in *ArticleInfoParams, opts ...grpc.CallOption) (*ArticleInfoResp, error)
	// 创建软文
	AddArticle(ctx context.Context, in *EditArticleParams, opts ...grpc.CallOption) (*ArticleAddResp, error)
	// 编辑软文
	EditArticle(ctx context.Context, in *EditArticleParams, opts ...grpc.CallOption) (*ArticleOkResp, error)
	// 软文审核
	ReviewArticle(ctx context.Context, in *ReviewArticleParams, opts ...grpc.CallOption) (*ArticleOkResp, error)
	// 删除软文
	DeleteArticle(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*ArticleOkResp, error)
	// 标签列表
	ListLabel(ctx context.Context, in *ListLabelParams, opts ...grpc.CallOption) (*LabelListResp, error)
	// 标签详情
	LabelInfo(ctx context.Context, in *LabelInfoParams, opts ...grpc.CallOption) (*LabelInfoResp, error)
	// 新增标签
	AddLabel(ctx context.Context, in *AddLabelParams, opts ...grpc.CallOption) (*LabelInfoResp, error)
	// 修改标签状态
	UpdateLabel(ctx context.Context, in *UpdateLabelParams, opts ...grpc.CallOption) (*ArticleOkResp, error)
	// 删除标签
	DeleteLabel(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*ArticleOkResp, error)
}

type articleRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcServiceClient(cc grpc.ClientConnInterface) ArticleRpcServiceClient {
	return &articleRpcServiceClient{cc}
}

func (c *articleRpcServiceClient) ListArticle(ctx context.Context, in *ListArticleParams, opts ...grpc.CallOption) (*ArticleListResp, error) {
	out := new(ArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_ListArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) ArticleInfo(ctx context.Context, in *ArticleInfoParams, opts ...grpc.CallOption) (*ArticleInfoResp, error) {
	out := new(ArticleInfoResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_ArticleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AddArticle(ctx context.Context, in *EditArticleParams, opts ...grpc.CallOption) (*ArticleAddResp, error) {
	out := new(ArticleAddResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AddArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) EditArticle(ctx context.Context, in *EditArticleParams, opts ...grpc.CallOption) (*ArticleOkResp, error) {
	out := new(ArticleOkResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_EditArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) ReviewArticle(ctx context.Context, in *ReviewArticleParams, opts ...grpc.CallOption) (*ArticleOkResp, error) {
	out := new(ArticleOkResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_ReviewArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) DeleteArticle(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*ArticleOkResp, error) {
	out := new(ArticleOkResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) ListLabel(ctx context.Context, in *ListLabelParams, opts ...grpc.CallOption) (*LabelListResp, error) {
	out := new(LabelListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_ListLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) LabelInfo(ctx context.Context, in *LabelInfoParams, opts ...grpc.CallOption) (*LabelInfoResp, error) {
	out := new(LabelInfoResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_LabelInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AddLabel(ctx context.Context, in *AddLabelParams, opts ...grpc.CallOption) (*LabelInfoResp, error) {
	out := new(LabelInfoResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AddLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) UpdateLabel(ctx context.Context, in *UpdateLabelParams, opts ...grpc.CallOption) (*ArticleOkResp, error) {
	out := new(ArticleOkResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_UpdateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) DeleteLabel(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*ArticleOkResp, error) {
	out := new(ArticleOkResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_DeleteLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServiceServer is the server API for ArticleRpcService service.
// All implementations must embed UnimplementedArticleRpcServiceServer
// for forward compatibility
type ArticleRpcServiceServer interface {
	// 软文列表
	ListArticle(context.Context, *ListArticleParams) (*ArticleListResp, error)
	// 软文详情
	ArticleInfo(context.Context, *ArticleInfoParams) (*ArticleInfoResp, error)
	// 创建软文
	AddArticle(context.Context, *EditArticleParams) (*ArticleAddResp, error)
	// 编辑软文
	EditArticle(context.Context, *EditArticleParams) (*ArticleOkResp, error)
	// 软文审核
	ReviewArticle(context.Context, *ReviewArticleParams) (*ArticleOkResp, error)
	// 删除软文
	DeleteArticle(context.Context, *DeleteParams) (*ArticleOkResp, error)
	// 标签列表
	ListLabel(context.Context, *ListLabelParams) (*LabelListResp, error)
	// 标签详情
	LabelInfo(context.Context, *LabelInfoParams) (*LabelInfoResp, error)
	// 新增标签
	AddLabel(context.Context, *AddLabelParams) (*LabelInfoResp, error)
	// 修改标签状态
	UpdateLabel(context.Context, *UpdateLabelParams) (*ArticleOkResp, error)
	// 删除标签
	DeleteLabel(context.Context, *DeleteParams) (*ArticleOkResp, error)
	mustEmbedUnimplementedArticleRpcServiceServer()
}

// UnimplementedArticleRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServiceServer struct {
}

func (UnimplementedArticleRpcServiceServer) ListArticle(context.Context, *ListArticleParams) (*ArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticle not implemented")
}
func (UnimplementedArticleRpcServiceServer) ArticleInfo(context.Context, *ArticleInfoParams) (*ArticleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleInfo not implemented")
}
func (UnimplementedArticleRpcServiceServer) AddArticle(context.Context, *EditArticleParams) (*ArticleAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArticle not implemented")
}
func (UnimplementedArticleRpcServiceServer) EditArticle(context.Context, *EditArticleParams) (*ArticleOkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArticle not implemented")
}
func (UnimplementedArticleRpcServiceServer) ReviewArticle(context.Context, *ReviewArticleParams) (*ArticleOkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewArticle not implemented")
}
func (UnimplementedArticleRpcServiceServer) DeleteArticle(context.Context, *DeleteParams) (*ArticleOkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleRpcServiceServer) ListLabel(context.Context, *ListLabelParams) (*LabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabel not implemented")
}
func (UnimplementedArticleRpcServiceServer) LabelInfo(context.Context, *LabelInfoParams) (*LabelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelInfo not implemented")
}
func (UnimplementedArticleRpcServiceServer) AddLabel(context.Context, *AddLabelParams) (*LabelInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabel not implemented")
}
func (UnimplementedArticleRpcServiceServer) UpdateLabel(context.Context, *UpdateLabelParams) (*ArticleOkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}
func (UnimplementedArticleRpcServiceServer) DeleteLabel(context.Context, *DeleteParams) (*ArticleOkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedArticleRpcServiceServer) mustEmbedUnimplementedArticleRpcServiceServer() {}

// UnsafeArticleRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServiceServer will
// result in compilation errors.
type UnsafeArticleRpcServiceServer interface {
	mustEmbedUnimplementedArticleRpcServiceServer()
}

func RegisterArticleRpcServiceServer(s grpc.ServiceRegistrar, srv ArticleRpcServiceServer) {
	s.RegisterService(&ArticleRpcService_ServiceDesc, srv)
}

func _ArticleRpcService_ListArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).ListArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_ListArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).ListArticle(ctx, req.(*ListArticleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_ArticleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).ArticleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_ArticleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).ArticleInfo(ctx, req.(*ArticleInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AddArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditArticleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AddArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AddArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AddArticle(ctx, req.(*EditArticleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_EditArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditArticleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).EditArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_EditArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).EditArticle(ctx, req.(*EditArticleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_ReviewArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewArticleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).ReviewArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_ReviewArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).ReviewArticle(ctx, req.(*ReviewArticleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).DeleteArticle(ctx, req.(*DeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_ListLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).ListLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_ListLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).ListLabel(ctx, req.(*ListLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_LabelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).LabelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_LabelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).LabelInfo(ctx, req.(*LabelInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AddLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AddLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AddLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AddLabel(ctx, req.(*AddLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_UpdateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).UpdateLabel(ctx, req.(*UpdateLabelParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_DeleteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).DeleteLabel(ctx, req.(*DeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpcService_ServiceDesc is the grpc.ServiceDesc for ArticleRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleRpcService",
	HandlerType: (*ArticleRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArticle",
			Handler:    _ArticleRpcService_ListArticle_Handler,
		},
		{
			MethodName: "ArticleInfo",
			Handler:    _ArticleRpcService_ArticleInfo_Handler,
		},
		{
			MethodName: "AddArticle",
			Handler:    _ArticleRpcService_AddArticle_Handler,
		},
		{
			MethodName: "EditArticle",
			Handler:    _ArticleRpcService_EditArticle_Handler,
		},
		{
			MethodName: "ReviewArticle",
			Handler:    _ArticleRpcService_ReviewArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleRpcService_DeleteArticle_Handler,
		},
		{
			MethodName: "ListLabel",
			Handler:    _ArticleRpcService_ListLabel_Handler,
		},
		{
			MethodName: "LabelInfo",
			Handler:    _ArticleRpcService_LabelInfo_Handler,
		},
		{
			MethodName: "AddLabel",
			Handler:    _ArticleRpcService_AddLabel_Handler,
		},
		{
			MethodName: "UpdateLabel",
			Handler:    _ArticleRpcService_UpdateLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _ArticleRpcService_DeleteLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
