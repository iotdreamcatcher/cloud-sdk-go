// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: oss.proto

package oss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OssRpcService_GenerateUploadSign_FullMethodName = "/oss.OssRpcService/GenerateUploadSign"
	OssRpcService_CheckUploadResult_FullMethodName  = "/oss.OssRpcService/CheckUploadResult"
	OssRpcService_Callback_FullMethodName           = "/oss.OssRpcService/Callback"
)

// OssRpcServiceClient is the client API for OssRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OssRpcServiceClient interface {
	GenerateUploadSign(ctx context.Context, in *GenerateUploadSignParams, opts ...grpc.CallOption) (*GenerateUploadSignParamsResp, error)
	CheckUploadResult(ctx context.Context, in *CheckUploadResultParams, opts ...grpc.CallOption) (*CheckUploadResultResp, error)
	Callback(ctx context.Context, in *CallbackParams, opts ...grpc.CallOption) (*CallbackResp, error)
}

type ossRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOssRpcServiceClient(cc grpc.ClientConnInterface) OssRpcServiceClient {
	return &ossRpcServiceClient{cc}
}

func (c *ossRpcServiceClient) GenerateUploadSign(ctx context.Context, in *GenerateUploadSignParams, opts ...grpc.CallOption) (*GenerateUploadSignParamsResp, error) {
	out := new(GenerateUploadSignParamsResp)
	err := c.cc.Invoke(ctx, OssRpcService_GenerateUploadSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossRpcServiceClient) CheckUploadResult(ctx context.Context, in *CheckUploadResultParams, opts ...grpc.CallOption) (*CheckUploadResultResp, error) {
	out := new(CheckUploadResultResp)
	err := c.cc.Invoke(ctx, OssRpcService_CheckUploadResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ossRpcServiceClient) Callback(ctx context.Context, in *CallbackParams, opts ...grpc.CallOption) (*CallbackResp, error) {
	out := new(CallbackResp)
	err := c.cc.Invoke(ctx, OssRpcService_Callback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssRpcServiceServer is the server API for OssRpcService service.
// All implementations must embed UnimplementedOssRpcServiceServer
// for forward compatibility
type OssRpcServiceServer interface {
	GenerateUploadSign(context.Context, *GenerateUploadSignParams) (*GenerateUploadSignParamsResp, error)
	CheckUploadResult(context.Context, *CheckUploadResultParams) (*CheckUploadResultResp, error)
	Callback(context.Context, *CallbackParams) (*CallbackResp, error)
	mustEmbedUnimplementedOssRpcServiceServer()
}

// UnimplementedOssRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOssRpcServiceServer struct {
}

func (UnimplementedOssRpcServiceServer) GenerateUploadSign(context.Context, *GenerateUploadSignParams) (*GenerateUploadSignParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadSign not implemented")
}
func (UnimplementedOssRpcServiceServer) CheckUploadResult(context.Context, *CheckUploadResultParams) (*CheckUploadResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUploadResult not implemented")
}
func (UnimplementedOssRpcServiceServer) Callback(context.Context, *CallbackParams) (*CallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedOssRpcServiceServer) mustEmbedUnimplementedOssRpcServiceServer() {}

// UnsafeOssRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OssRpcServiceServer will
// types in compilation errors.
type UnsafeOssRpcServiceServer interface {
	mustEmbedUnimplementedOssRpcServiceServer()
}

func RegisterOssRpcServiceServer(s grpc.ServiceRegistrar, srv OssRpcServiceServer) {
	s.RegisterService(&OssRpcService_ServiceDesc, srv)
}

func _OssRpcService_GenerateUploadSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadSignParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssRpcServiceServer).GenerateUploadSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OssRpcService_GenerateUploadSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssRpcServiceServer).GenerateUploadSign(ctx, req.(*GenerateUploadSignParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OssRpcService_CheckUploadResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUploadResultParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssRpcServiceServer).CheckUploadResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OssRpcService_CheckUploadResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssRpcServiceServer).CheckUploadResult(ctx, req.(*CheckUploadResultParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OssRpcService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssRpcServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OssRpcService_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssRpcServiceServer).Callback(ctx, req.(*CallbackParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OssRpcService_ServiceDesc is the grpc.ServiceDesc for OssRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OssRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oss.OssRpcService",
	HandlerType: (*OssRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateUploadSign",
			Handler:    _OssRpcService_GenerateUploadSign_Handler,
		},
		{
			MethodName: "CheckUploadResult",
			Handler:    _OssRpcService_CheckUploadResult_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _OssRpcService_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss.proto",
}
