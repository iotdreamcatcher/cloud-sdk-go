// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.1
// source: push.proto

package push

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PushRpcServiceClient is the client API for PushRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushRpcServiceClient interface {
	IosPush(ctx context.Context, in *IosPushReq, opts ...grpc.CallOption) (*PushResp, error)
	HuaweiPush(ctx context.Context, in *HuaweiPushReq, opts ...grpc.CallOption) (*PushResp, error)
	XiaomiPush(ctx context.Context, in *XiaomiPushReq, opts ...grpc.CallOption) (*PushResp, error)
}

type pushRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushRpcServiceClient(cc grpc.ClientConnInterface) PushRpcServiceClient {
	return &pushRpcServiceClient{cc}
}

func (c *pushRpcServiceClient) IosPush(ctx context.Context, in *IosPushReq, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/push.PushRpcService/IosPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushRpcServiceClient) HuaweiPush(ctx context.Context, in *HuaweiPushReq, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/push.PushRpcService/HuaweiPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushRpcServiceClient) XiaomiPush(ctx context.Context, in *XiaomiPushReq, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/push.PushRpcService/XiaomiPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushRpcServiceServer is the server API for PushRpcService service.
// All implementations must embed UnimplementedPushRpcServiceServer
// for forward compatibility
type PushRpcServiceServer interface {
	IosPush(context.Context, *IosPushReq) (*PushResp, error)
	HuaweiPush(context.Context, *HuaweiPushReq) (*PushResp, error)
	XiaomiPush(context.Context, *XiaomiPushReq) (*PushResp, error)
	mustEmbedUnimplementedPushRpcServiceServer()
}

// UnimplementedPushRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushRpcServiceServer struct {
}

func (UnimplementedPushRpcServiceServer) IosPush(context.Context, *IosPushReq) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IosPush not implemented")
}
func (UnimplementedPushRpcServiceServer) HuaweiPush(context.Context, *HuaweiPushReq) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HuaweiPush not implemented")
}
func (UnimplementedPushRpcServiceServer) XiaomiPush(context.Context, *XiaomiPushReq) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XiaomiPush not implemented")
}
func (UnimplementedPushRpcServiceServer) mustEmbedUnimplementedPushRpcServiceServer() {}

// UnsafePushRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushRpcServiceServer will
// result in compilation errors.
type UnsafePushRpcServiceServer interface {
	mustEmbedUnimplementedPushRpcServiceServer()
}

func RegisterPushRpcServiceServer(s grpc.ServiceRegistrar, srv PushRpcServiceServer) {
	s.RegisterService(&PushRpcService_ServiceDesc, srv)
}

func _PushRpcService_IosPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IosPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushRpcServiceServer).IosPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.PushRpcService/IosPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushRpcServiceServer).IosPush(ctx, req.(*IosPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushRpcService_HuaweiPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HuaweiPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushRpcServiceServer).HuaweiPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.PushRpcService/HuaweiPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushRpcServiceServer).HuaweiPush(ctx, req.(*HuaweiPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushRpcService_XiaomiPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XiaomiPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushRpcServiceServer).XiaomiPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.PushRpcService/XiaomiPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushRpcServiceServer).XiaomiPush(ctx, req.(*XiaomiPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PushRpcService_ServiceDesc is the grpc.ServiceDesc for PushRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "push.PushRpcService",
	HandlerType: (*PushRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IosPush",
			Handler:    _PushRpcService_IosPush_Handler,
		},
		{
			MethodName: "HuaweiPush",
			Handler:    _PushRpcService_HuaweiPush_Handler,
		},
		{
			MethodName: "XiaomiPush",
			Handler:    _PushRpcService_XiaomiPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}
