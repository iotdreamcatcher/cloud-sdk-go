// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cloudc.proto

package cloudc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudCService_CaptchaConfigSet_FullMethodName    = "/cloudc.CloudCService/CaptchaConfigSet"
	CloudCService_CaptchaConfigGet_FullMethodName    = "/cloudc.CloudCService/CaptchaConfigGet"
	CloudCService_CaptchaConfigGetAll_FullMethodName = "/cloudc.CloudCService/CaptchaConfigGetAll"
	CloudCService_DouyinConfigSet_FullMethodName     = "/cloudc.CloudCService/DouyinConfigSet"
	CloudCService_DouyinConfigGet_FullMethodName     = "/cloudc.CloudCService/DouyinConfigGet"
	CloudCService_DouyinConfigGetAll_FullMethodName  = "/cloudc.CloudCService/DouyinConfigGetAll"
	CloudCService_WechatConfigSet_FullMethodName     = "/cloudc.CloudCService/WechatConfigSet"
	CloudCService_WechatConfigGet_FullMethodName     = "/cloudc.CloudCService/WechatConfigGet"
	CloudCService_WechatConfigGetAll_FullMethodName  = "/cloudc.CloudCService/WechatConfigGetAll"
	CloudCService_SmsConfigSet_FullMethodName        = "/cloudc.CloudCService/SmsConfigSet"
	CloudCService_SmsConfigGet_FullMethodName        = "/cloudc.CloudCService/SmsConfigGet"
	CloudCService_SmsConfigGetAll_FullMethodName     = "/cloudc.CloudCService/SmsConfigGetAll"
	CloudCService_EmsConfigSet_FullMethodName        = "/cloudc.CloudCService/EmsConfigSet"
	CloudCService_EmsConfigGet_FullMethodName        = "/cloudc.CloudCService/EmsConfigGet"
	CloudCService_EmsConfigGetAll_FullMethodName     = "/cloudc.CloudCService/EmsConfigGetAll"
	CloudCService_OssConfigSet_FullMethodName        = "/cloudc.CloudCService/OssConfigSet"
	CloudCService_OssConfigGet_FullMethodName        = "/cloudc.CloudCService/OssConfigGet"
	CloudCService_OssConfigGetAll_FullMethodName     = "/cloudc.CloudCService/OssConfigGetAll"
)

// CloudCServiceClient is the client API for CloudCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudCServiceClient interface {
	// note: captcha
	CaptchaConfigSet(ctx context.Context, in *CaptchaConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	CaptchaConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*CaptchaConfigGetResp, error)
	CaptchaConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*CaptchaConfigGetAllResp, error)
	// note: 新增配置
	DouyinConfigSet(ctx context.Context, in *DouyinConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	DouyinConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*DouyinConfigGetResp, error)
	DouyinConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*DouyinConfigGetAllResp, error)
	// note: 新增配置
	WechatConfigSet(ctx context.Context, in *WechatConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	WechatConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*WechatConfigGetResp, error)
	WechatConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*WechatConfigGetAllResp, error)
	// rpc WechatConfigCache(WechatConfigGetAllParams) returns (WechatConfigGetAllResp);
	// note: 短信配置
	SmsConfigSet(ctx context.Context, in *SmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	SmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SmsConfigGetResp, error)
	SmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SmsConfigGetAllResp, error)
	// note: 短信配置
	EmsConfigSet(ctx context.Context, in *EmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	EmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*EmsConfigGetResp, error)
	EmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*EmsConfigGetAllResp, error)
	// note: Oss配置
	OssConfigSet(ctx context.Context, in *OssConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	OssConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*OssConfigGetResp, error)
	OssConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*OssConfigGetAllResp, error)
}

type cloudCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudCServiceClient(cc grpc.ClientConnInterface) CloudCServiceClient {
	return &cloudCServiceClient{cc}
}

func (c *cloudCServiceClient) CaptchaConfigSet(ctx context.Context, in *CaptchaConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_CaptchaConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) CaptchaConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*CaptchaConfigGetResp, error) {
	out := new(CaptchaConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_CaptchaConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) CaptchaConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*CaptchaConfigGetAllResp, error) {
	out := new(CaptchaConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_CaptchaConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) DouyinConfigSet(ctx context.Context, in *DouyinConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_DouyinConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) DouyinConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*DouyinConfigGetResp, error) {
	out := new(DouyinConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_DouyinConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) DouyinConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*DouyinConfigGetAllResp, error) {
	out := new(DouyinConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_DouyinConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) WechatConfigSet(ctx context.Context, in *WechatConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_WechatConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) WechatConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*WechatConfigGetResp, error) {
	out := new(WechatConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_WechatConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) WechatConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*WechatConfigGetAllResp, error) {
	out := new(WechatConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_WechatConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) SmsConfigSet(ctx context.Context, in *SmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_SmsConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) SmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SmsConfigGetResp, error) {
	out := new(SmsConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_SmsConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) SmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SmsConfigGetAllResp, error) {
	out := new(SmsConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_SmsConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) EmsConfigSet(ctx context.Context, in *EmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_EmsConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) EmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*EmsConfigGetResp, error) {
	out := new(EmsConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_EmsConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) EmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*EmsConfigGetAllResp, error) {
	out := new(EmsConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_EmsConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) OssConfigSet(ctx context.Context, in *OssConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCService_OssConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) OssConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*OssConfigGetResp, error) {
	out := new(OssConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCService_OssConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCServiceClient) OssConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*OssConfigGetAllResp, error) {
	out := new(OssConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCService_OssConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudCServiceServer is the server API for CloudCService service.
// All implementations must embed UnimplementedCloudCServiceServer
// for forward compatibility
type CloudCServiceServer interface {
	// note: captcha
	CaptchaConfigSet(context.Context, *CaptchaConfigSetParams) (*ConfigResp, error)
	CaptchaConfigGet(context.Context, *ConfigGetParams) (*CaptchaConfigGetResp, error)
	CaptchaConfigGetAll(context.Context, *ConfigGetAllParams) (*CaptchaConfigGetAllResp, error)
	// note: 新增配置
	DouyinConfigSet(context.Context, *DouyinConfigSetParams) (*ConfigResp, error)
	DouyinConfigGet(context.Context, *ConfigGetParams) (*DouyinConfigGetResp, error)
	DouyinConfigGetAll(context.Context, *ConfigGetAllParams) (*DouyinConfigGetAllResp, error)
	// note: 新增配置
	WechatConfigSet(context.Context, *WechatConfigSetParams) (*ConfigResp, error)
	WechatConfigGet(context.Context, *ConfigGetParams) (*WechatConfigGetResp, error)
	WechatConfigGetAll(context.Context, *ConfigGetAllParams) (*WechatConfigGetAllResp, error)
	// rpc WechatConfigCache(WechatConfigGetAllParams) returns (WechatConfigGetAllResp);
	// note: 短信配置
	SmsConfigSet(context.Context, *SmsConfigSetParams) (*ConfigResp, error)
	SmsConfigGet(context.Context, *ConfigGetParams) (*SmsConfigGetResp, error)
	SmsConfigGetAll(context.Context, *ConfigGetAllParams) (*SmsConfigGetAllResp, error)
	// note: 短信配置
	EmsConfigSet(context.Context, *EmsConfigSetParams) (*ConfigResp, error)
	EmsConfigGet(context.Context, *ConfigGetParams) (*EmsConfigGetResp, error)
	EmsConfigGetAll(context.Context, *ConfigGetAllParams) (*EmsConfigGetAllResp, error)
	// note: Oss配置
	OssConfigSet(context.Context, *OssConfigSetParams) (*ConfigResp, error)
	OssConfigGet(context.Context, *ConfigGetParams) (*OssConfigGetResp, error)
	OssConfigGetAll(context.Context, *ConfigGetAllParams) (*OssConfigGetAllResp, error)
	mustEmbedUnimplementedCloudCServiceServer()
}

// UnimplementedCloudCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudCServiceServer struct {
}

func (UnimplementedCloudCServiceServer) CaptchaConfigSet(context.Context, *CaptchaConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) CaptchaConfigGet(context.Context, *ConfigGetParams) (*CaptchaConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) CaptchaConfigGetAll(context.Context, *ConfigGetAllParams) (*CaptchaConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) DouyinConfigSet(context.Context, *DouyinConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) DouyinConfigGet(context.Context, *ConfigGetParams) (*DouyinConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) DouyinConfigGetAll(context.Context, *ConfigGetAllParams) (*DouyinConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) WechatConfigSet(context.Context, *WechatConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) WechatConfigGet(context.Context, *ConfigGetParams) (*WechatConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) WechatConfigGetAll(context.Context, *ConfigGetAllParams) (*WechatConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) SmsConfigSet(context.Context, *SmsConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) SmsConfigGet(context.Context, *ConfigGetParams) (*SmsConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) SmsConfigGetAll(context.Context, *ConfigGetAllParams) (*SmsConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) EmsConfigSet(context.Context, *EmsConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) EmsConfigGet(context.Context, *ConfigGetParams) (*EmsConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) EmsConfigGetAll(context.Context, *ConfigGetAllParams) (*EmsConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) OssConfigSet(context.Context, *OssConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigSet not implemented")
}
func (UnimplementedCloudCServiceServer) OssConfigGet(context.Context, *ConfigGetParams) (*OssConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigGet not implemented")
}
func (UnimplementedCloudCServiceServer) OssConfigGetAll(context.Context, *ConfigGetAllParams) (*OssConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigGetAll not implemented")
}
func (UnimplementedCloudCServiceServer) mustEmbedUnimplementedCloudCServiceServer() {}

// UnsafeCloudCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudCServiceServer will
// result in compilation errors.
type UnsafeCloudCServiceServer interface {
	mustEmbedUnimplementedCloudCServiceServer()
}

func RegisterCloudCServiceServer(s grpc.ServiceRegistrar, srv CloudCServiceServer) {
	s.RegisterService(&CloudCService_ServiceDesc, srv)
}

func _CloudCService_CaptchaConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).CaptchaConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_CaptchaConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).CaptchaConfigSet(ctx, req.(*CaptchaConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_CaptchaConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).CaptchaConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_CaptchaConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).CaptchaConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_CaptchaConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).CaptchaConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_CaptchaConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).CaptchaConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_DouyinConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).DouyinConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_DouyinConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).DouyinConfigSet(ctx, req.(*DouyinConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_DouyinConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).DouyinConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_DouyinConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).DouyinConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_DouyinConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).DouyinConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_DouyinConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).DouyinConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_WechatConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).WechatConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_WechatConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).WechatConfigSet(ctx, req.(*WechatConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_WechatConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).WechatConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_WechatConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).WechatConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_WechatConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).WechatConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_WechatConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).WechatConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_SmsConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).SmsConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_SmsConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).SmsConfigSet(ctx, req.(*SmsConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_SmsConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).SmsConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_SmsConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).SmsConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_SmsConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).SmsConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_SmsConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).SmsConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_EmsConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).EmsConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_EmsConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).EmsConfigSet(ctx, req.(*EmsConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_EmsConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).EmsConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_EmsConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).EmsConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_EmsConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).EmsConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_EmsConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).EmsConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_OssConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).OssConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_OssConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).OssConfigSet(ctx, req.(*OssConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_OssConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).OssConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_OssConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).OssConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCService_OssConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCServiceServer).OssConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCService_OssConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCServiceServer).OssConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudCService_ServiceDesc is the grpc.ServiceDesc for CloudCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudc.CloudCService",
	HandlerType: (*CloudCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptchaConfigSet",
			Handler:    _CloudCService_CaptchaConfigSet_Handler,
		},
		{
			MethodName: "CaptchaConfigGet",
			Handler:    _CloudCService_CaptchaConfigGet_Handler,
		},
		{
			MethodName: "CaptchaConfigGetAll",
			Handler:    _CloudCService_CaptchaConfigGetAll_Handler,
		},
		{
			MethodName: "DouyinConfigSet",
			Handler:    _CloudCService_DouyinConfigSet_Handler,
		},
		{
			MethodName: "DouyinConfigGet",
			Handler:    _CloudCService_DouyinConfigGet_Handler,
		},
		{
			MethodName: "DouyinConfigGetAll",
			Handler:    _CloudCService_DouyinConfigGetAll_Handler,
		},
		{
			MethodName: "WechatConfigSet",
			Handler:    _CloudCService_WechatConfigSet_Handler,
		},
		{
			MethodName: "WechatConfigGet",
			Handler:    _CloudCService_WechatConfigGet_Handler,
		},
		{
			MethodName: "WechatConfigGetAll",
			Handler:    _CloudCService_WechatConfigGetAll_Handler,
		},
		{
			MethodName: "SmsConfigSet",
			Handler:    _CloudCService_SmsConfigSet_Handler,
		},
		{
			MethodName: "SmsConfigGet",
			Handler:    _CloudCService_SmsConfigGet_Handler,
		},
		{
			MethodName: "SmsConfigGetAll",
			Handler:    _CloudCService_SmsConfigGetAll_Handler,
		},
		{
			MethodName: "EmsConfigSet",
			Handler:    _CloudCService_EmsConfigSet_Handler,
		},
		{
			MethodName: "EmsConfigGet",
			Handler:    _CloudCService_EmsConfigGet_Handler,
		},
		{
			MethodName: "EmsConfigGetAll",
			Handler:    _CloudCService_EmsConfigGetAll_Handler,
		},
		{
			MethodName: "OssConfigSet",
			Handler:    _CloudCService_OssConfigSet_Handler,
		},
		{
			MethodName: "OssConfigGet",
			Handler:    _CloudCService_OssConfigGet_Handler,
		},
		{
			MethodName: "OssConfigGetAll",
			Handler:    _CloudCService_OssConfigGetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudc.proto",
}
