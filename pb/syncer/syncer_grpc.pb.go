// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: syncer.proto

package syncer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SyncerRpcService_SetDevMqttToken_FullMethodName     = "/syncer.SyncerRpcService/SetDevMqttToken"
	SyncerRpcService_SetUserMqttToken_FullMethodName    = "/syncer.SyncerRpcService/SetUserMqttToken"
	SyncerRpcService_DeleteUserMqttToken_FullMethodName = "/syncer.SyncerRpcService/DeleteUserMqttToken"
	SyncerRpcService_DeleteDevMqttToken_FullMethodName  = "/syncer.SyncerRpcService/DeleteDevMqttToken"
)

// SyncerRpcServiceClient is the client API for SyncerRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerRpcServiceClient interface {
	// note: v2
	SetDevMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error)
	SetUserMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error)
	DeleteUserMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error)
	DeleteDevMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error)
}

type syncerRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerRpcServiceClient(cc grpc.ClientConnInterface) SyncerRpcServiceClient {
	return &syncerRpcServiceClient{cc}
}

func (c *syncerRpcServiceClient) SetDevMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error) {
	out := new(SyncMqttTokenResp)
	err := c.cc.Invoke(ctx, SyncerRpcService_SetDevMqttToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerRpcServiceClient) SetUserMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error) {
	out := new(SyncMqttTokenResp)
	err := c.cc.Invoke(ctx, SyncerRpcService_SetUserMqttToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerRpcServiceClient) DeleteUserMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error) {
	out := new(SyncMqttTokenResp)
	err := c.cc.Invoke(ctx, SyncerRpcService_DeleteUserMqttToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerRpcServiceClient) DeleteDevMqttToken(ctx context.Context, in *SyncMqttTokenReq, opts ...grpc.CallOption) (*SyncMqttTokenResp, error) {
	out := new(SyncMqttTokenResp)
	err := c.cc.Invoke(ctx, SyncerRpcService_DeleteDevMqttToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerRpcServiceServer is the server API for SyncerRpcService service.
// All implementations must embed UnimplementedSyncerRpcServiceServer
// for forward compatibility
type SyncerRpcServiceServer interface {
	// note: v2
	SetDevMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error)
	SetUserMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error)
	DeleteUserMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error)
	DeleteDevMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error)
	mustEmbedUnimplementedSyncerRpcServiceServer()
}

// UnimplementedSyncerRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerRpcServiceServer struct {
}

func (UnimplementedSyncerRpcServiceServer) SetDevMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDevMqttToken not implemented")
}
func (UnimplementedSyncerRpcServiceServer) SetUserMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserMqttToken not implemented")
}
func (UnimplementedSyncerRpcServiceServer) DeleteUserMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMqttToken not implemented")
}
func (UnimplementedSyncerRpcServiceServer) DeleteDevMqttToken(context.Context, *SyncMqttTokenReq) (*SyncMqttTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevMqttToken not implemented")
}
func (UnimplementedSyncerRpcServiceServer) mustEmbedUnimplementedSyncerRpcServiceServer() {}

// UnsafeSyncerRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerRpcServiceServer will
// result in compilation errors.
type UnsafeSyncerRpcServiceServer interface {
	mustEmbedUnimplementedSyncerRpcServiceServer()
}

func RegisterSyncerRpcServiceServer(s grpc.ServiceRegistrar, srv SyncerRpcServiceServer) {
	s.RegisterService(&SyncerRpcService_ServiceDesc, srv)
}

func _SyncerRpcService_SetDevMqttToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMqttTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerRpcServiceServer).SetDevMqttToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncerRpcService_SetDevMqttToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerRpcServiceServer).SetDevMqttToken(ctx, req.(*SyncMqttTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerRpcService_SetUserMqttToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMqttTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerRpcServiceServer).SetUserMqttToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncerRpcService_SetUserMqttToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerRpcServiceServer).SetUserMqttToken(ctx, req.(*SyncMqttTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerRpcService_DeleteUserMqttToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMqttTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerRpcServiceServer).DeleteUserMqttToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncerRpcService_DeleteUserMqttToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerRpcServiceServer).DeleteUserMqttToken(ctx, req.(*SyncMqttTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncerRpcService_DeleteDevMqttToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMqttTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerRpcServiceServer).DeleteDevMqttToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncerRpcService_DeleteDevMqttToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerRpcServiceServer).DeleteDevMqttToken(ctx, req.(*SyncMqttTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncerRpcService_ServiceDesc is the grpc.ServiceDesc for SyncerRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncerRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncer.SyncerRpcService",
	HandlerType: (*SyncerRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDevMqttToken",
			Handler:    _SyncerRpcService_SetDevMqttToken_Handler,
		},
		{
			MethodName: "SetUserMqttToken",
			Handler:    _SyncerRpcService_SetUserMqttToken_Handler,
		},
		{
			MethodName: "DeleteUserMqttToken",
			Handler:    _SyncerRpcService_DeleteUserMqttToken_Handler,
		},
		{
			MethodName: "DeleteDevMqttToken",
			Handler:    _SyncerRpcService_DeleteDevMqttToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer.proto",
}
