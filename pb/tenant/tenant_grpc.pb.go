// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: tenant.proto

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TenantRpcService_TenantLogin_FullMethodName  = "/tenant.TenantRpcService/TenantLogin"
	TenantRpcService_TenantList_FullMethodName   = "/tenant.TenantRpcService/TenantList"
	TenantRpcService_TenantInfo_FullMethodName   = "/tenant.TenantRpcService/TenantInfo"
	TenantRpcService_AddTenant_FullMethodName    = "/tenant.TenantRpcService/AddTenant"
	TenantRpcService_PwdTenant_FullMethodName    = "/tenant.TenantRpcService/PwdTenant"
	TenantRpcService_EditTenant_FullMethodName   = "/tenant.TenantRpcService/EditTenant"
	TenantRpcService_DeleteTenant_FullMethodName = "/tenant.TenantRpcService/DeleteTenant"
)

// TenantRpcServiceClient is the client API for TenantRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantRpcServiceClient interface {
	// 租户登录
	TenantLogin(ctx context.Context, in *TenantLoginParams, opts ...grpc.CallOption) (*TenantResp, error)
	// 租户列表
	TenantList(ctx context.Context, in *TenantListParams, opts ...grpc.CallOption) (*TenantListResp, error)
	// 租户详情
	TenantInfo(ctx context.Context, in *TenantInfoParams, opts ...grpc.CallOption) (*TenantInfoResp, error)
	// 添加租户
	AddTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*AddTenantResp, error)
	// 修改密码
	PwdTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*TenantResp, error)
	// 修改租户
	EditTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*TenantResp, error)
	// 删除租户
	DeleteTenant(ctx context.Context, in *DeleteTenantParams, opts ...grpc.CallOption) (*TenantResp, error)
}

type tenantRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantRpcServiceClient(cc grpc.ClientConnInterface) TenantRpcServiceClient {
	return &tenantRpcServiceClient{cc}
}

func (c *tenantRpcServiceClient) TenantLogin(ctx context.Context, in *TenantLoginParams, opts ...grpc.CallOption) (*TenantResp, error) {
	out := new(TenantResp)
	err := c.cc.Invoke(ctx, TenantRpcService_TenantLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) TenantList(ctx context.Context, in *TenantListParams, opts ...grpc.CallOption) (*TenantListResp, error) {
	out := new(TenantListResp)
	err := c.cc.Invoke(ctx, TenantRpcService_TenantList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) TenantInfo(ctx context.Context, in *TenantInfoParams, opts ...grpc.CallOption) (*TenantInfoResp, error) {
	out := new(TenantInfoResp)
	err := c.cc.Invoke(ctx, TenantRpcService_TenantInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) AddTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*AddTenantResp, error) {
	out := new(AddTenantResp)
	err := c.cc.Invoke(ctx, TenantRpcService_AddTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) PwdTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*TenantResp, error) {
	out := new(TenantResp)
	err := c.cc.Invoke(ctx, TenantRpcService_PwdTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) EditTenant(ctx context.Context, in *EditTenantParams, opts ...grpc.CallOption) (*TenantResp, error) {
	out := new(TenantResp)
	err := c.cc.Invoke(ctx, TenantRpcService_EditTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRpcServiceClient) DeleteTenant(ctx context.Context, in *DeleteTenantParams, opts ...grpc.CallOption) (*TenantResp, error) {
	out := new(TenantResp)
	err := c.cc.Invoke(ctx, TenantRpcService_DeleteTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantRpcServiceServer is the server API for TenantRpcService service.
// All implementations must embed UnimplementedTenantRpcServiceServer
// for forward compatibility
type TenantRpcServiceServer interface {
	// 租户登录
	TenantLogin(context.Context, *TenantLoginParams) (*TenantResp, error)
	// 租户列表
	TenantList(context.Context, *TenantListParams) (*TenantListResp, error)
	// 租户详情
	TenantInfo(context.Context, *TenantInfoParams) (*TenantInfoResp, error)
	// 添加租户
	AddTenant(context.Context, *EditTenantParams) (*AddTenantResp, error)
	// 修改密码
	PwdTenant(context.Context, *EditTenantParams) (*TenantResp, error)
	// 修改租户
	EditTenant(context.Context, *EditTenantParams) (*TenantResp, error)
	// 删除租户
	DeleteTenant(context.Context, *DeleteTenantParams) (*TenantResp, error)
	mustEmbedUnimplementedTenantRpcServiceServer()
}

// UnimplementedTenantRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantRpcServiceServer struct {
}

func (UnimplementedTenantRpcServiceServer) TenantLogin(context.Context, *TenantLoginParams) (*TenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantLogin not implemented")
}
func (UnimplementedTenantRpcServiceServer) TenantList(context.Context, *TenantListParams) (*TenantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantList not implemented")
}
func (UnimplementedTenantRpcServiceServer) TenantInfo(context.Context, *TenantInfoParams) (*TenantInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfo not implemented")
}
func (UnimplementedTenantRpcServiceServer) AddTenant(context.Context, *EditTenantParams) (*AddTenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenant not implemented")
}
func (UnimplementedTenantRpcServiceServer) PwdTenant(context.Context, *EditTenantParams) (*TenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PwdTenant not implemented")
}
func (UnimplementedTenantRpcServiceServer) EditTenant(context.Context, *EditTenantParams) (*TenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTenant not implemented")
}
func (UnimplementedTenantRpcServiceServer) DeleteTenant(context.Context, *DeleteTenantParams) (*TenantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedTenantRpcServiceServer) mustEmbedUnimplementedTenantRpcServiceServer() {}

// UnsafeTenantRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantRpcServiceServer will
// types in compilation errors.
type UnsafeTenantRpcServiceServer interface {
	mustEmbedUnimplementedTenantRpcServiceServer()
}

func RegisterTenantRpcServiceServer(s grpc.ServiceRegistrar, srv TenantRpcServiceServer) {
	s.RegisterService(&TenantRpcService_ServiceDesc, srv)
}

func _TenantRpcService_TenantLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantLoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).TenantLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_TenantLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).TenantLogin(ctx, req.(*TenantLoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_TenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).TenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_TenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).TenantList(ctx, req.(*TenantListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_TenantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).TenantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_TenantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).TenantInfo(ctx, req.(*TenantInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_AddTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTenantParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).AddTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_AddTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).AddTenant(ctx, req.(*EditTenantParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_PwdTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTenantParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).PwdTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_PwdTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).PwdTenant(ctx, req.(*EditTenantParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_EditTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTenantParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).EditTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_EditTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).EditTenant(ctx, req.(*EditTenantParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRpcService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRpcServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantRpcService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRpcServiceServer).DeleteTenant(ctx, req.(*DeleteTenantParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantRpcService_ServiceDesc is the grpc.ServiceDesc for TenantRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenant.TenantRpcService",
	HandlerType: (*TenantRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantLogin",
			Handler:    _TenantRpcService_TenantLogin_Handler,
		},
		{
			MethodName: "TenantList",
			Handler:    _TenantRpcService_TenantList_Handler,
		},
		{
			MethodName: "TenantInfo",
			Handler:    _TenantRpcService_TenantInfo_Handler,
		},
		{
			MethodName: "AddTenant",
			Handler:    _TenantRpcService_AddTenant_Handler,
		},
		{
			MethodName: "PwdTenant",
			Handler:    _TenantRpcService_PwdTenant_Handler,
		},
		{
			MethodName: "EditTenant",
			Handler:    _TenantRpcService_EditTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _TenantRpcService_DeleteTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}
