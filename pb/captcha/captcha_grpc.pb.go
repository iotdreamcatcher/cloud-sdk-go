// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: captcha.proto

package captcha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaptchaRpcService_CaptchaGenerate_FullMethodName = "/captcha.CaptchaRpcService/CaptchaGenerate"
)

// CaptchaRpcServiceClient is the client API for CaptchaRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptchaRpcServiceClient interface {
	CaptchaGenerate(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*CaptchaResp, error)
}

type captchaRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaRpcServiceClient(cc grpc.ClientConnInterface) CaptchaRpcServiceClient {
	return &captchaRpcServiceClient{cc}
}

func (c *captchaRpcServiceClient) CaptchaGenerate(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*CaptchaResp, error) {
	out := new(CaptchaResp)
	err := c.cc.Invoke(ctx, CaptchaRpcService_CaptchaGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaRpcServiceServer is the server API for CaptchaRpcService service.
// All implementations must embed UnimplementedCaptchaRpcServiceServer
// for forward compatibility
type CaptchaRpcServiceServer interface {
	CaptchaGenerate(context.Context, *CaptchaReq) (*CaptchaResp, error)
	mustEmbedUnimplementedCaptchaRpcServiceServer()
}

// UnimplementedCaptchaRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaptchaRpcServiceServer struct {
}

func (UnimplementedCaptchaRpcServiceServer) CaptchaGenerate(context.Context, *CaptchaReq) (*CaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaGenerate not implemented")
}
func (UnimplementedCaptchaRpcServiceServer) mustEmbedUnimplementedCaptchaRpcServiceServer() {}

// UnsafeCaptchaRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptchaRpcServiceServer will
// result in compilation errors.
type UnsafeCaptchaRpcServiceServer interface {
	mustEmbedUnimplementedCaptchaRpcServiceServer()
}

func RegisterCaptchaRpcServiceServer(s grpc.ServiceRegistrar, srv CaptchaRpcServiceServer) {
	s.RegisterService(&CaptchaRpcService_ServiceDesc, srv)
}

func _CaptchaRpcService_CaptchaGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaRpcServiceServer).CaptchaGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptchaRpcService_CaptchaGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaRpcServiceServer).CaptchaGenerate(ctx, req.(*CaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptchaRpcService_ServiceDesc is the grpc.ServiceDesc for CaptchaRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptchaRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captcha.CaptchaRpcService",
	HandlerType: (*CaptchaRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptchaGenerate",
			Handler:    _CaptchaRpcService_CaptchaGenerate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "captcha.proto",
}
